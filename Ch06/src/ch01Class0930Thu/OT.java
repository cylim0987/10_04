package ch01Class0930Thu;

public class OT {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
/*
 * 
 * OOP 오브젝트 오리엔티드 플그래밍. 기본 -> 객체 -> 객체. 새로운 프로그램을 만든다. 객체들끼리 연산을 하도록 해서 프로그램을
 * 만드는 것?
 * 
 * 객체란 무엇이냐? 물리적으로 존재하는 것,,, 자동차, 책 사람 추상적인 것(회사, 날짜) 중에서 자신의 속성(이름,종류)과 동작(기능)을
 * 가지는 모든 것. 객체는 필드(속성)과 메소드(동작)로 구성된 자바 객체로 모델링 가능. 물리적이거나 추상적인 것 중에 뭔가를 만드는..
 * 자동차를 만들어서 달리게 프로그래밍하고 싶.다. 그러면 자동차 클래스를 만들어야 하는데 자동차에는 생산연도도 있고, 색상, 자동차 이름도
 * 있음. 이런 것들이 다 속성. 자동차가 달릴수도 있고 멈출수도있음. 이것은 기능.
 * 
 * 그림 [현실세계] [자바]
 * 
 * 
 * 
 * 객체의 상호 작용 상호작용할 객체들은 {기능(동작)-메소드}을 이용하고 데이터를 주고 받음. 사람이 계산기를 사용하려할때.
 * 
 * 자동차! 자동차!
 * 
 * 사람과 자동차는 사용의 관계
 * 자동차 와 엔진,타이어,핸들은 집합 관계
 * 상속관계? 종류 객체와 구체적인
 * 
 * 
 * 객체 지향 프로그래밍의 특징:
 * 		캡슐화. 외부 객체가 객체를 사용할 때 객체에 있는 메소드나 안에 있는 정보, 필드에 접근을 하려고. 
 * 		근데 어떤 정보는 노출시켜도 되는 정보, 어떤 정보는 노출시키면 안 되는 정보
 * 		노출된 것과 숨겨진 것들을 구분. 외부로부터 읽기 쓰기가 가능하도록 허락해주는 것. 그리고 외부로부터 읽기 쓰기 호출을 막는 것. = 캡슐화.
 * 
 * 
 * 클래스의 용도
 * 라이브러리 용
 * 자체적으로 실행되지 않고 다른 클래스에서 이용할 목적으로 만든 클래스
 * 	실행용
 * 	main()메소드를 가지고 있는 클래스로 실행할 목적으로 만든 클래스
 *  1개의 애플리케이션 = (1개의 실행클래스) + (n개의 라이브러리 클래스)
 * 
 * 
 * 
 */